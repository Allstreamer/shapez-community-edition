// ----------------------------------------
/* Duplicates an animation and adds two classes .<classPrefix>Even and .<classPrefix>Odd which uses the
  animation. This can be used to replay the animation by toggling between the classes, because
  it is not possible to restart a css animation */
@mixin MakeAnimationWrappedEvenOdd($duration, $classPrefix: "anim", $childSelector: "") {
    $animName: autogen_anim_#{unique-id()};

    @at-root {
        @keyframes #{$animName}_even {
            @content;
        }

        @keyframes #{$animName}_odd {
            @content;
        }
    }

    &.#{$classPrefix}Even #{$childSelector} {
        animation: #{$animName}_even $duration;
    }

    &.#{$classPrefix}Odd #{$childSelector} {
        animation: #{$animName}_odd $duration;
    }
}

// ----------------------------------------
/* Allows to use and define an animation without specifying its name */
@mixin InlineAnimation($duration) {
    $animName: autogen_anim_#{unique-id()};

    @at-root {
        @keyframes #{$animName} {
            @content;
        }
    }

    animation: $animName $duration !important;
}

// ----------------------------------------
/* Define a style which is only applied when the viewport has at maximum the given width */
@mixin StyleBelowWidth($maxW) {
    @media (max-width: #{$maxW}) {
        @content;
    }
}

// ----------------------------------------
// Dynamic graphics quality styles

@mixin BoxShadow3D($bgColor, $size: 3px, $pressEffect: true) {
    background-color: $bgColor;

    $borderSize: 1.5px;
    $borderColor: rgb(18, 20, 24);

    // box-shadow: 0 0 0 D($borderSize) $borderColor, 0 D($size) 0 0px rgba(mix(darken($bgColor, 9), #b0e2ff, 95%), 1),
    //     0 D($size) 0 D($borderSize) $borderColor;

    // box-shadow: 0 0 0 D($borderSize) $borderColor, 0 D($size) 0 D($borderSize) $borderColor,
    //     D(-$size * 1.5) D($size * 2) 0 D($borderSize) rgba(0, 0, 0, 0.1);

    // transition: box-shadow 0.1s ease-in-out;

    // @if $pressEffect {
    //     &.pressed {
    //         transform: none !important;
    //         $pSize: max(0, $size - 1.5px);
    //         transition: none !important;
    //         box-shadow: 0 0 0 D($borderSize) $borderColor, 0 D($pSize) 0 0px rgba(mix(darken($bgColor, 9), #b0e2ff, 95%), 1),
    //             0 D($pSize) 0 D($borderSize) $borderColor;
    //         top: D($size - $pSize);
    //     }
    // }
}

@mixin BoxShadow($x, $y, $blur, $offset, $color) {
    box-shadow: D($x) D($y) D($blur) D($offset) $color;
}

@mixin DropShadow($yOffset: 2px, $blur: 2px, $amount: 0.2) {
    @include BoxShadow(0, $yOffset, $blur, 0, rgba(#000, $amount));
}

@mixin Button3D($bgColor, $pressEffect: true) {
    @include BoxShadow3D($bgColor, 2px, $pressEffect);
}

$legacyTextShadow3DColor: rgb(222, 234, 238);

@mixin DarkThemeOverride {
    @at-root html[data-theme="dark"] &,
        &[data-theme="dark"] {
        @content;
    }
}

@mixin DarkThemeInvert {
    @include DarkThemeOverride {
        filter: invert(1);
    }
}
